/// TODO
/// append button
@mixin make-buttons() {
  @include make-btn-groups();

  .btn {
    @extend %clear-button-style;
    @include make-btn($btn-bg-default, $btn-bg-white);
    @include iterate-buttons();
    @include make-buttons-sizes();
    @include make-rounded-buttons();
    @include make-circle-buttons();
  }
}

@mixin iterate-buttons() {
  @each $color-name, $params in $btn-colors {
    @if (map-has-key($params, 'text-color') and map-has-key($params, 'background')) {
      $background: map-get($params, 'background');
      $text-color: map-get($params, 'text-color');
      
      @if (map-has-key($params, 'background-active')) {
        $background-active: map-get($params, 'background-active');
      } @else {
        $background-active: darken($background, 10%);
      }

      @if (map-has-key($params, 'active-shadow')) {
        $active-shadow: map-get($params, 'active-shadow');
      } @else {
        $active-shadow: .5;
      }
    }

    &.btn-#{$color-name} {
      @include make-btn($background, $text-color, $background-active, $active-shadow);
    }
  }
}

@mixin make-btn($background, $text-color, $background-active: darken($background, 10%), $active-shadow: .5) {
  background: $background;
  color: transparentize($text-color, .1);
  box-shadow: $btn-shadow;
  transition: $btn-transition;

  $states: btn-states();
  $active: btn-states('active');
  $disabled: btn-states('disabled');

  #{$states} {
    background: $background-active;
    color: transparentize($text-color, .4);
    box-shadow: $btn-shadow-hover;
  }

  #{$active} {
    box-shadow: 0 .08em .16em rgba(0, 0, 0, $active-shadow) inset;
  }

  #{$disabled} {
    cursor: text;
  }

  &.outline {
    @include make-outline-btn($background, $text-color, $background-active, $active-shadow);
  }

  &.flat {
    @include make-flat-btn($background, $text-color, $background-active, $active-shadow);
  }
}

@mixin make-flat-btn($background, $text-color, $background-active: darken($background, 10%), $active-shadow: .5) {
  background: $background;
  color: transparentize($text-color, .1);
  box-shadow: none;

  $states: btn-states();
  $active: btn-states('active');
  $disabled: btn-states('disabled');

  #{$states} {
    background: $background-active;
    color: transparentize($text-color, .4);
    box-shadow: none;
  }

  #{$active} {
    box-shadow: 0 .08em .16em rgba(0, 0, 0, $active-shadow) inset;
  }

  #{$disabled} {
    cursor: text;
  }
}

@mixin make-outline-btn($background, $text-color, $background-active: darken($background, 10%), $active-shadow: .5) {
  background: none;
  border: 1px solid $background;
  color: $background;

  $hover: btn-states('hover');
  $active: btn-states('active');
  $disabled: btn-states('disabled');

  #{$hover} {
    background: $background;
    color: transparentize($text-color, .1);
  }

  #{$active} {
    border: 0;
    background: none;
    color: transparentize($background, .4);
    box-shadow: 0 .08em .16em transparentize($background-active, .4) inset;
  }

  #{$disabled} {
    border: 1px solid transparentize($background, .7);
    background: none;
    color: transparentize($background, .4);
    box-shadow: none; 
  }
}

@mixin make-btn-groups() {
  .btn-group:after {
    @extend %clearfix;
  }

  .btn-group > .btn,
  .btn-group > .btn-outline {
    float: left;

    &:not(:first-child):not(:last-child) {
      @include border-radius(0);
    }

    &:first-child {
      @include border-radius(0, right);
    }

    &:last-child {
      @include border-radius(0, left);
    }
  }
}

@mixin make-rounded-buttons() {
  &.rounded {
    border-radius: $btn-rounded-radius;
  }
}

@mixin make-circle-buttons() {
  &.circle {
    width: $btn-circle-size;
    height: $btn-circle-size;
    margin: 0;
    padding: 0;
    border-radius: 50%;
    line-height: $btn-circle-size;
  }
}

@mixin make-buttons-sizes() {
  &.large {
    font-size: $btn-font-large;
  }

  &.small {
    font-size: $btn-font-small;
  }

  &.smaller {
    font-size: $btn-font-smaller;
  }
}

@function btn-states($state: '') {
  $list: ();

  @if ($state == 'hover' or $state == '') {
    $list: append($list, unquote('&:hover'), comma);
    $list: append($list, unquote('&.hover'), comma);
  }

  @if ($state == 'focus' or $state == '') {
    $list: append($list, unquote('&:focus'), comma);
    $list: append($list, unquote('&.focus'), comma);
  }

  @if ($state == 'active' or $state == '') {
    $list: append($list, unquote('&:active'), comma);
    $list: append($list, unquote('&.active'), comma);
  }

  @if ($state == 'disabled' or $state == '') {
    $list: append($list, unquote('[disabled]'), comma);
    $list: append($list, unquote('&:disabled'), comma);
    $list: append($list, unquote('&.disabled'), comma);
  }

  @return $list;
}

// TODO
// fonts from typography
%clear-button-style {
  display: inline-block;
  margin: 0;
  padding: $btn-padding-vertical $btn-padding-horizontal;

  border: 0;
  border-radius: $btn-radius;
  outline: none;
  background: none;
  
  font-family: arial;
  font-size: $btn-font-normal;
  font-weight: normal;
  line-height: $base-line;
  text-align: center;
  text-decoration: none;
  
  box-shadow: none;
  cursor: pointer;
  vertical-align: top;
}
