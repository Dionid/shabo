// Private grid mixins
@mixin make-blocks() {
  @for $i from 2 through $blocks-count {
    .blocks {
      @extend %clearfix;
      position: relative;
      margin: 0;
      padding: 0;
      
      list-style-type: none;

      &.blocks-#{$i} {
        > li {
          @include blocks-list-item($i);

          @media only screen and (max-width: 767px) {
            width: 100%;
            margin-left: 0;
            float: none;
          }
        }

        @for $j from 2 through $blocks-count {
          &.blocks-mobile-#{$j} > li {
            @media only screen and (max-width: 767px) {
              @include blocks-list-item($j);
            }
          }
        }
      }
    }
  }
}

@mixin blocks-list-item($count) {
  float: left;
  width: (($grid-width - ($grid-gutter-width * ($count - 1))) / $count / ($grid-width / 100)) * 1%;
  margin-left: $grid-gutter-width / ($grid-width / 100) * 1%;

  // Clear for new rows
  &:nth-child(#{$count}n + 1) {
    margin-left: 0;
    clear: left;
  }
}

// Blocks
@mixin block($count) {
  width: (($grid-width - ($grid-gutter-width * $count)) / $count / ($grid-width / 100)) * 1%;
}

// Columns
@mixin column($count) {
  width: (($grid-width - ($grid-gutter-width * ($count - 1))) / $count / ($grid-width / 100)) * 1%;
}

// Columns
@mixin columns($factor, $count) {
  width: ((($grid-width - ($grid-gutter-width * ($count - 1))) / $count / ($grid-width / 100)) * $factor) + (($grid-gutter-width / ($grid-width / 100)) * ($factor - 1)) * 1%;
}

@mixin column-push($count) {
  left: ((($grid-width - ($grid-gutter-width * ($count - 1))) / $count / ($grid-width / 100)) + $grid-gutter-width/($grid-width/100)) * 1%;
}

@mixin columns-push($factor, $count) {
  left: (((($grid-width - ($grid-gutter-width * ($count - 1))) / $count / ($grid-width / 100)) * $factor) + (($grid-gutter-width / ($grid-width / 100)) * ($factor - 1)) + $grid-gutter-width/($grid-width/100)) * 1%;
}
